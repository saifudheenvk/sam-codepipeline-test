openapi: 3.0.0
info:
  title: My test api collection
  description: Public API Specification for the myFitApp Mobile Marketing Platform
  version: "1.0.0"
  contact:
    name: Saifu
    url: 'https://saifu.com'
    email: saifu@saifu.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'

x-amazon-apigateway-request-validators:
  all:
    validateRequestParameters: true
    validateRequestBody: true
  params-only:
    validateRequestParameters: true
    validateRequestBody: false
  body-only:
    validateRequestParameters: false
    validateRequestBody: true

paths:
  /products:
    get:
      summary: Get all products
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        type: aws_proxy
        passthroughBehavior: when_no_match
        httpMethod: POST
        tags:
          - products
        operationId: get-products
        uri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:test-function/invocations
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
      security: []
      x-amazon-apigateway-auth:
        type: NONE 
    post:
      summary: Create a new product
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        type: aws_proxy
        passthroughBehavior: when_no_match
        httpMethod: POST
        tags:
          - products
        operationId: create-product
        uri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:test-function/invocations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: object
      security: []
      x-amazon-apigateway-auth:
        type: NONE
    patch: 
      summary: Update a product
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        type: aws_proxy
        passthroughBehavior: when_no_match
        httpMethod: POST
        tags:
          - products
        operationId: update-product
        uri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:test-function/invocations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
      security: []
      x-amazon-apigateway-auth:
        type: NONE
    delete:
      summary: Delete a product
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        type: aws_proxy
        passthroughBehavior: when_no_match
        httpMethod: POST
        tags:
          - products
        operationId: delete-product
        uri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:test-function/invocations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                type: object
      security: []
      x-amazon-apigateway-auth:
        type: NONE